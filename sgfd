{"cells": [{"metadata": {}, "cell_type": "markdown", "source": "<center>\n    <img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/Logos/organization_logo/organization_logo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  />\n</center>\n\n# Scraping and Analyzing Basketball Statistics with Python\n\n## Objectives\n\nAfter completing this lab you will be able to:\n\n-   Comfortable do web scrapping to collate data from websites\n-   Analyze the data, visualize it and make inferences\n"}, {"metadata": {}, "cell_type": "markdown", "source": "## Description\n\nWeb scraping involves extracting data from websites. In this assignment, you will web scrape basketball statistics from Wikipedia of some of the greatest basketball players. You will perform some analysis on the data using Pandas, plot, data answer some basic questions then store the data on IBM cloud.\n"}, {"metadata": {}, "cell_type": "markdown", "source": "The players we will use are shown in the following figure from left to right we have <a href='https://en.wikipedia.org/wiki/Michael_Jordan'>Michael Jordan </a>,\n<a href='https://en.wikipedia.org/wiki/Kobe_Bryant'>Kobe Bryant</a>,\n<a href='https://en.wikipedia.org/wiki/LeBron_James'>Lebron James</a> and <a href='https://en.wikipedia.org/wiki/Stephen_Curry'>Stephen Curry</a>.\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/EdX/Images/Michael_Jordan.jpg\" alt=\"Trulli\" width=\"100\" height=\"200\">\n<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/EdX/Images/Kobe_Bryant.jpg\" alt=\"Trulli\" width=\"100\" height=\"75\">\n<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/EdX/Images/Lebron.jpg\" alt=\"Trulli\" width=\"100\" height=\"200\">\n<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/EdX/Images/Stephen_Curry_Shooting.jpg\" alt=\"Trulli\" width=\"100\" height=\"75\">\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<center>Figure: following figure from left to right we have <a href='https://en.wikipedia.org/wiki/Michael_Jordan'>Michael Jordan </a>,\n<a href='https://en.wikipedia.org/wiki/Kobe_Bryant'>Kobe Bryant</a>,\n<a href='https://en.wikipedia.org/wiki/LeBron_James'>Lebron James</a> and <a href='https://en.wikipedia.org/wiki/Stephen_Curry'>Stephen Curry</a></center> <i>(image source Wikipedia)</i>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<b>Wikipedia.org</b> has the statistics of each Basketball Player in different tables; we will use the table <bb>regular season</b>.  The Table for  <a href='https://en.wikipedia.org/wiki/Michael_Jordan'>Michael Jordan </a> is shown here:\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<table class=\"wikitable sortable\" style=\"font-size:95%; text-align:right;\">\n<tbody><tr>\n<th>Year\n</th>\n<th>Team\n</th>\n<th><abbr title=\"Games played\">GP</abbr>\n</th>\n<th><abbr title=\"Games started\">GS</abbr>\n</th>\n<th><abbr title=\"Minutes per game\">MPG</abbr>\n</th>\n<th><abbr title=\"Field goal percentage\">FG%</abbr>\n</th>\n<th><abbr title=\"3-point field-goal percentage\">3P%</abbr>\n</th>\n<th><abbr title=\"Free-throw percentage\">FT%</abbr>\n</th>\n<th><abbr title=\"Rebounds per game\">RPG</abbr>\n</th>\n<th><abbr title=\"Assists per game\">APG</abbr>\n</th>\n<th><abbr title=\"Steals per game\">SPG</abbr>\n</th>\n<th><abbr title=\"Blocks per game\">BPG</abbr>\n</th>\n<th><abbr title=\"Points per game\">PPG</abbr>\n</th></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/1984%E2%80%9385_NBA_season\" title=\"1984\u201385 NBA season\">1984\u201385</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1984%E2%80%9385_Chicago_Bulls_season\" title=\"1984\u201385 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td>38.3</td>\n<td>.515</td>\n<td>.173</td>\n<td>.845</td>\n<td>6.5</td>\n<td>5.9</td>\n<td>2.4</td>\n<td>.8</td>\n<td>28.2\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/1985%E2%80%9386_NBA_season\" title=\"1985\u201386 NBA season\">1985\u201386</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1985%E2%80%9386_Chicago_Bulls_season\" title=\"1985\u201386 Chicago Bulls season\">Chicago</a>\n</td>\n<td>18</td>\n<td>7</td>\n<td>25.1</td>\n<td>.457</td>\n<td>.167</td>\n<td>.840</td>\n<td>3.6</td>\n<td>2.9</td>\n<td>2.1</td>\n<td>1.2</td>\n<td>22.7\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/1986%E2%80%9387_NBA_season\" title=\"1986\u201387 NBA season\">1986\u201387</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1986%E2%80%9387_Chicago_Bulls_season\" title=\"1986\u201387 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td>40.0</td>\n<td>.482</td>\n<td>.182</td>\n<td><b>.857</b></td>\n<td>5.2</td>\n<td>4.6</td>\n<td>2.9</td>\n<td>1.5</td>\n<td style=\"background:#cfecec;\"><b>37.1</b>*\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/1987%E2%80%9388_NBA_season\" title=\"1987\u201388 NBA season\">1987\u201388</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1987%E2%80%9388_Chicago_Bulls_season\" title=\"1987\u201388 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td bgcolor=\"CFECEC\"><b>40.4</b>*</td>\n<td>.535</td>\n<td>.132</td>\n<td>.841</td>\n<td>5.5</td>\n<td>5.9</td>\n<td bgcolor=\"CFECEC\"><b>3.2</b>*</td>\n<td><b>1.6</b></td>\n<td style=\"background:#cfecec;\">35.0*\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/1988%E2%80%9389_NBA_season\" title=\"1988\u201389 NBA season\">1988\u201389</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1988%E2%80%9389_Chicago_Bulls_season\" title=\"1988\u201389 Chicago Bulls season\">Chicago</a>\n</td>\n<td>81</td>\n<td>81</td>\n<td bgcolor=\"CFECEC\">40.2*</td>\n<td>.538</td>\n<td>.276</td>\n<td>.850</td>\n<td><b>8.0</b></td>\n<td><b>8.0</b></td>\n<td>2.9</td>\n<td>.8</td>\n<td style=\"background:#cfecec;\">32.5*\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/1989%E2%80%9390_NBA_season\" title=\"1989\u201390 NBA season\">1989\u201390</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1989%E2%80%9390_Chicago_Bulls_season\" title=\"1989\u201390 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td>39.0</td>\n<td>.526</td>\n<td>.376</td>\n<td>.848</td>\n<td>6.9</td>\n<td>6.3</td>\n<td bgcolor=\"CFECEC\">2.8*</td>\n<td>.7</td>\n<td style=\"background:#cfecec;\">33.6*\n</td></tr>\n<tr>\n<td style=\"text-align:left;background:#afe6ba;\"><a href=\"/wiki/1990%E2%80%9391_NBA_season\" title=\"1990\u201391 NBA season\">1990\u201391</a>\u2020\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1990%E2%80%9391_Chicago_Bulls_season\" title=\"1990\u201391 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td>37.0</td>\n<td><b>.539</b></td>\n<td>.312</td>\n<td>.851</td>\n<td>6.0</td>\n<td>5.5</td>\n<td>2.7</td>\n<td>1.0</td>\n<td style=\"background:#cfecec;\">31.5*\n</td></tr>\n<tr>\n<td style=\"text-align:left;background:#afe6ba;\"><a href=\"/wiki/1991%E2%80%9392_NBA_season\" title=\"1991\u201392 NBA season\">1991\u201392</a>\u2020\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1991%E2%80%9392_Chicago_Bulls_season\" title=\"1991\u201392 Chicago Bulls season\">Chicago</a>\n</td>\n<td>80</td>\n<td>80</td>\n<td>38.8</td>\n<td>.519</td>\n<td>.270</td>\n<td>.832</td>\n<td>6.4</td>\n<td>6.1</td>\n<td>2.3</td>\n<td>.9</td>\n<td style=\"background:#cfecec;\">30.1*\n</td></tr>\n<tr>\n<td style=\"text-align:left;background:#afe6ba;\"><a href=\"/wiki/1992%E2%80%9393_NBA_season\" title=\"1992\u201393 NBA season\">1992\u201393</a>\u2020\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1992%E2%80%9393_Chicago_Bulls_season\" title=\"1992\u201393 Chicago Bulls season\">Chicago</a>\n</td>\n<td>78</td>\n<td>78</td>\n<td>39.3</td>\n<td>.495</td>\n<td>.352</td>\n<td>.837</td>\n<td>6.7</td>\n<td>5.5</td>\n<td bgcolor=\"CFECEC\">2.8*</td>\n<td>.8</td>\n<td style=\"background:#cfecec;\">32.6*\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/1994%E2%80%9395_NBA_season\" title=\"1994\u201395 NBA season\">1994\u201395</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1994%E2%80%9395_Chicago_Bulls_season\" title=\"1994\u201395 Chicago Bulls season\">Chicago</a>\n</td>\n<td>17</td>\n<td>17</td>\n<td>39.3</td>\n<td>.411</td>\n<td><b>.500</b></td>\n<td>.801</td>\n<td>6.9</td>\n<td>5.3</td>\n<td>1.8</td>\n<td>.8</td>\n<td>26.9\n</td></tr>\n<tr>\n<td style=\"text-align:left;background:#afe6ba;\"><a href=\"/wiki/1995%E2%80%9396_NBA_season\" title=\"1995\u201396 NBA season\">1995\u201396</a>\u2020\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1995%E2%80%9396_Chicago_Bulls_season\" title=\"1995\u201396 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td>37.7</td>\n<td>.495</td>\n<td>.427</td>\n<td>.834</td>\n<td>6.6</td>\n<td>4.3</td>\n<td>2.2</td>\n<td>.5</td>\n<td style=\"background:#cfecec;\">30.4*\n</td></tr>\n<tr>\n<td style=\"text-align:left;background:#afe6ba;\"><a href=\"/wiki/1996%E2%80%9397_NBA_season\" title=\"1996\u201397 NBA season\">1996\u201397</a>\u2020\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1996%E2%80%9397_Chicago_Bulls_season\" title=\"1996\u201397 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td>37.9</td>\n<td>.486</td>\n<td>.374</td>\n<td>.833</td>\n<td>5.9</td>\n<td>4.3</td>\n<td>1.7</td>\n<td>.5</td>\n<td style=\"background:#cfecec;\">29.6*\n</td></tr>\n<tr>\n<td style=\"text-align:left;background:#afe6ba;\"><a href=\"/wiki/1997%E2%80%9398_NBA_season\" title=\"1997\u201398 NBA season\">1997\u201398</a>\u2020\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/1997%E2%80%9398_Chicago_Bulls_season\" title=\"1997\u201398 Chicago Bulls season\">Chicago</a>\n</td>\n<td><b>82</b></td>\n<td><b>82</b></td>\n<td>38.8</td>\n<td>.465</td>\n<td>.238</td>\n<td>.784</td>\n<td>5.8</td>\n<td>3.5</td>\n<td>1.7</td>\n<td>.5</td>\n<td style=\"background:#cfecec;\">28.7*\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/2001%E2%80%9302_NBA_season\" title=\"2001\u201302 NBA season\">2001\u201302</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/2001%E2%80%9302_Washington_Wizards_season\" title=\"2001\u201302 Washington Wizards season\">Washington</a>\n</td>\n<td>60</td>\n<td>53</td>\n<td>34.9</td>\n<td>.416</td>\n<td>.189</td>\n<td>.790</td>\n<td>5.7</td>\n<td>5.2</td>\n<td>1.4</td>\n<td>.4</td>\n<td>22.9\n</td></tr>\n<tr>\n<td style=\"text-align:left;\"><a href=\"/wiki/2002%E2%80%9303_NBA_season\" title=\"2002\u201303 NBA season\">2002\u201303</a>\n</td>\n<td style=\"text-align:left;\"><a href=\"/wiki/2002%E2%80%9303_Washington_Wizards_season\" title=\"2002\u201303 Washington Wizards season\">Washington</a>\n</td>\n<td><b>82</b></td>\n<td>67</td>\n<td>37.0</td>\n<td>.445</td>\n<td>.291</td>\n<td>.821</td>\n<td>6.1</td>\n<td>3.8</td>\n<td>1.5</td>\n<td>.5</td>\n<td>20.0\n</td></tr>\n<tr class=\"sortbottom\">\n<td colspan=\"2\" style=\"text-align:center;\"><b>Career</b>\n</td>\n<td>1,072</td>\n<td>1,039</td>\n<td>38.3</td>\n<td>.497</td>\n<td>.327</td>\n<td>.835</td>\n<td>6.2</td>\n<td>5.3</td>\n<td>2.3</td>\n<td>.8</td>\n<td style=\"background:#E0CEF2; width:3em\">30.1<img alt=\"double-dagger\" data-file-height=\"14\" data-file-width=\"9\" decoding=\"async\" height=\"14\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/FinalModule_edX/upload.wikimedia.org/wikipedia/commons/f/f9/Double-dagger-14-plain.png\" width=\"9\">\n</td></tr>\n<tr class=\"sortbottom\">\n<td colspan=\"2\" style=\"text-align:center;\"><b>All-Star</b>\n</td>\n<td>13</td>\n<td>13</td>\n<td>29.4</td>\n<td>.472</td>\n<td>.273</td>\n<td>.750</td>\n<td>4.7</td>\n<td>4.2</td>\n<td>2.8</td>\n<td>.5</td>\n<td>20.2\n</td></tr></tbody></table>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "We will scrape the data for each year for each player convert the data for each player into a Pandas Dataframe, plot the results for Points per game, perform some analysis. Finally, we will store the results in the IBM cloud.\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<h2>Table of Contents</h2>\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ul>\n    <li><a href=\"#Section_1\">Define a Web Scraping Function </a></li>\n    <li><a href=\"#Section_2\">Web Scraping and Converting to Pandas Dataframe</a> </li>\n    <li><a href=\"#Section_3\">Plot the Points per game</a></li>\n    <li><a href=\"#Section_4\">How to submit </a></li>\n    </ul>\n<p>\n    Estimated Time Needed: <strong>180 min</strong></p>\n</div>\n\n<hr>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<h2 id=\"Section_1\"> Define a Web Scraping Function  </h2>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "In this section, we define the function <code>get_basketball_stats</code>. The function will return a dictionary corresponding to the Regular season statistics of each basketball player scraped from m <a href=\"http://en.wikipedia.org\">en.wikipedia.org</a>. \nThe <a href=\"[https://en.wikipedia.org/wiki/Parameter](https://en.wikipedia.org/wiki/Parameter?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ)_(computer_programming)\"> Formal Parameter </a> or input  <code> link</code> is going to be the URL of the Wikipedia page for each player. This function will return a  Python dictionary. The keys will be the column names, and the values will be a list that contains a different columns; the element of each list will be a separate row for that column.\nYou don't have to know how the function works just the input in the output. \n"}, {"metadata": {}, "cell_type": "code", "source": "import bs4\nimport requests\nimport pandas as pd\nimport numpy as np\nimport boto3", "execution_count": 1, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "def get_basketball_stats(link='https://en.wikipedia.org/wiki/Michael_Jordan'):\n    # read the webpage \n    response = requests.get(link)\n    # create a BeautifulSoup object to parse the HTML  \n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    # the player stats are defined  with the attribute CSS class set to 'wikitable sortable'; \n    #therefore we create a tag object \"table\"\n    table=soup.find(class_='wikitable sortable')\n\n    #the headers of the table are the first table row (tr) we create a tag object that has the first row  \n    headers=table.tr\n    #the table column names are displayed  as an abbreviation; therefore we find all the abbr tags and returs an Iterator\n    titles=headers.find_all(\"abbr\")\n    #we create a dictionary  and pass the table headers as the keys \n    data = {title['title']:[] for title in titles}\n   #we will store each column as a list in a dictionary, the header of the column will be the dictionary key \n\n    #we iterate over each table row by fining each table tag tr and assign it to the objed\n    for row in table.find_all('tr')[1:]:\n    \n        #we iterate over each cell in the table, as each cell corresponds to a different column we all obtain the correspondin key corresponding the column n \n        for key,a in zip(data.keys(),row.find_all(\"td\")[2:]):\n            # we append each elment and strip any extra HTML contnet \n            data[key].append(''.join(c for c in a.text if (c.isdigit() or c == \".\")))\n\n    # we remove extra rows by finding the smallest list     \n    Min=min([len(x)  for x in data.values()])\n    #we convert the elements in the key to floats \n    for key in data.keys():\n    \n        data[key]=list(map(lambda x: float(x), data[key][:Min]))\n       \n    return data", "execution_count": 2, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "<h2 id=\"Section_2\"> Question 1: Web Scraping the data and Converting to Pandas Dataframe   </h2>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "For this question, you must use the function <code>get_basketball_stats</code> to extract a Python Dictionary of the player statistics, convert the dictionary to a Python Dataframe.  To get full marks, you must display the first five rows of the dataframe for each player using the method head with the name of each player printed above. As shown in the following figuer **the order of the columns may be different depending on the version of Python**.\n"}, {"metadata": {}, "cell_type": "markdown", "source": " <img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/EdX/Images/question_one_answer.jpeg\" alt=\"Trulli\" width=\"1000\" height=\"1000\">\n"}, {"metadata": {}, "cell_type": "markdown", "source": "You will need the following libraries \n"}, {"metadata": {}, "cell_type": "code", "source": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\n", "execution_count": 3, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "The list <code>links</code> contain the link the Wikipedia article for each player. The list <code>names</codes> contains the names of each player.\n"}, {"metadata": {}, "cell_type": "code", "source": "links=['https://en.wikipedia.org/wiki/Michael_Jordan'\\\n       ,'https://en.wikipedia.org/wiki/Kobe_Bryant'\\\n      ,'https://en.wikipedia.org/wiki/LeBron_James'\\\n      \n      ,'https://en.wikipedia.org/wiki/Stephen_Curry']\nnames=['Michael Jordan','Kobe Bryant','Lebron James','Stephen Curry']", "execution_count": 4, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "You can use the function get_basketball_stats to extract the <b>Regular season table </b> and store it to a Python dictionary. For example, you can extract the table for Michael Jordan and convert it to a Python dictionary as follows:\n"}, {"metadata": {}, "cell_type": "markdown", "source": "#using the link  \n<code>\nmichael_jordan_dict=get_basketball_stats('[https://en.wikipedia.org/wiki/Michael_Jordan'](https://en.wikipedia.org/wiki/Michael_Jordan'?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork-19487395&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ))\n</code>\n\n#using the list\n\n<code>\nmichael_jordan_dict=get_basketball_stats(links[0])\n</code>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<h5>For each Player create a Python dictionary from the table <b>Regular season table </b>.</h5>\n"}, {"metadata": {}, "cell_type": "code", "source": "Dictionary = []\n\nfor wiki_stats in links:\n    Dictionary.append(get_basketball_stats(wiki_stats))", "execution_count": 5, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "<h5>For each Player convert the Python Dictionary to a Pandas Dataframe using the constructor <code>pd.DataFrame()</code> </h5>\n"}, {"metadata": {}, "cell_type": "code", "source": "DataFrameStats = []\n\nfor players in Dictionary:\n    DataFrameStats.append(pd.DataFrame(players))", "execution_count": 6, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "<h5>For each player display the first five rows of the Dataframe, print the name of each Player above the Dataframe.</h5>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "If you perform the process in a loop you will have to use the function <code>display</code> as follows:\n\n<code>display(df)</code>\n"}, {"metadata": {}, "cell_type": "code", "source": "for i, dataframe in enumerate(DataFrameStats):\n    print(names[i])\n    display(dataframe.head())", "execution_count": 7, "outputs": [{"output_type": "stream", "text": "Michael Jordan\n", "name": "stdout"}, {"output_type": "display_data", "data": {"text/plain": "   Games played  Games started  Minutes per game  Field goal percentage  \\\n0          82.0           82.0              38.3                  0.515   \n1          18.0            7.0              25.1                  0.457   \n2          82.0           82.0              40.0                  0.482   \n3          82.0           82.0              40.4                  0.535   \n4          81.0           81.0              40.2                  0.538   \n\n   3-point field-goal percentage  Free-throw percentage  Rebounds per game  \\\n0                          0.173                  0.845                6.5   \n1                          0.167                  0.840                3.6   \n2                          0.182                  0.857                5.2   \n3                          0.132                  0.841                5.5   \n4                          0.276                  0.850                8.0   \n\n   Assists per game  Steals per game  Blocks per game  Points per game  \n0               5.9              2.4              0.8             28.2  \n1               2.9              2.1              1.2             22.7  \n2               4.6              2.9              1.5             37.1  \n3               5.9              3.2              1.6             35.0  \n4               8.0              2.9              0.8             32.5  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Games played</th>\n      <th>Games started</th>\n      <th>Minutes per game</th>\n      <th>Field goal percentage</th>\n      <th>3-point field-goal percentage</th>\n      <th>Free-throw percentage</th>\n      <th>Rebounds per game</th>\n      <th>Assists per game</th>\n      <th>Steals per game</th>\n      <th>Blocks per game</th>\n      <th>Points per game</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>82.0</td>\n      <td>82.0</td>\n      <td>38.3</td>\n      <td>0.515</td>\n      <td>0.173</td>\n      <td>0.845</td>\n      <td>6.5</td>\n      <td>5.9</td>\n      <td>2.4</td>\n      <td>0.8</td>\n      <td>28.2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18.0</td>\n      <td>7.0</td>\n      <td>25.1</td>\n      <td>0.457</td>\n      <td>0.167</td>\n      <td>0.840</td>\n      <td>3.6</td>\n      <td>2.9</td>\n      <td>2.1</td>\n      <td>1.2</td>\n      <td>22.7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>82.0</td>\n      <td>82.0</td>\n      <td>40.0</td>\n      <td>0.482</td>\n      <td>0.182</td>\n      <td>0.857</td>\n      <td>5.2</td>\n      <td>4.6</td>\n      <td>2.9</td>\n      <td>1.5</td>\n      <td>37.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>82.0</td>\n      <td>82.0</td>\n      <td>40.4</td>\n      <td>0.535</td>\n      <td>0.132</td>\n      <td>0.841</td>\n      <td>5.5</td>\n      <td>5.9</td>\n      <td>3.2</td>\n      <td>1.6</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>81.0</td>\n      <td>81.0</td>\n      <td>40.2</td>\n      <td>0.538</td>\n      <td>0.276</td>\n      <td>0.850</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>2.9</td>\n      <td>0.8</td>\n      <td>32.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}, {"output_type": "stream", "text": "Kobe Bryant\n", "name": "stdout"}, {"output_type": "display_data", "data": {"text/plain": "   Games played  Games started  Minutes per game  Field goal percentage  \\\n0          71.0            6.0              15.5                  0.417   \n1          79.0            1.0              26.0                  0.428   \n2          50.0           50.0              37.9                  0.465   \n3          66.0           62.0              38.2                  0.468   \n4          68.0           68.0              40.9                  0.464   \n\n   3-point field-goal percentage  Free-throw percentage  Rebounds per game  \\\n0                          0.375                  0.819                1.9   \n1                          0.341                  0.794                3.1   \n2                          0.267                  0.839                5.3   \n3                          0.319                  0.821                6.3   \n4                          0.305                  0.853                5.9   \n\n   Assists per game  Steals per game  Blocks per game  Points per game  \n0               1.3              0.7              0.3              7.6  \n1               2.5              0.9              0.5             15.4  \n2               3.8              1.4              1.0             19.9  \n3               4.9              1.6              0.9             22.5  \n4               5.0              1.7              0.6             28.5  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Games played</th>\n      <th>Games started</th>\n      <th>Minutes per game</th>\n      <th>Field goal percentage</th>\n      <th>3-point field-goal percentage</th>\n      <th>Free-throw percentage</th>\n      <th>Rebounds per game</th>\n      <th>Assists per game</th>\n      <th>Steals per game</th>\n      <th>Blocks per game</th>\n      <th>Points per game</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>71.0</td>\n      <td>6.0</td>\n      <td>15.5</td>\n      <td>0.417</td>\n      <td>0.375</td>\n      <td>0.819</td>\n      <td>1.9</td>\n      <td>1.3</td>\n      <td>0.7</td>\n      <td>0.3</td>\n      <td>7.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>79.0</td>\n      <td>1.0</td>\n      <td>26.0</td>\n      <td>0.428</td>\n      <td>0.341</td>\n      <td>0.794</td>\n      <td>3.1</td>\n      <td>2.5</td>\n      <td>0.9</td>\n      <td>0.5</td>\n      <td>15.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>50.0</td>\n      <td>50.0</td>\n      <td>37.9</td>\n      <td>0.465</td>\n      <td>0.267</td>\n      <td>0.839</td>\n      <td>5.3</td>\n      <td>3.8</td>\n      <td>1.4</td>\n      <td>1.0</td>\n      <td>19.9</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>66.0</td>\n      <td>62.0</td>\n      <td>38.2</td>\n      <td>0.468</td>\n      <td>0.319</td>\n      <td>0.821</td>\n      <td>6.3</td>\n      <td>4.9</td>\n      <td>1.6</td>\n      <td>0.9</td>\n      <td>22.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>68.0</td>\n      <td>68.0</td>\n      <td>40.9</td>\n      <td>0.464</td>\n      <td>0.305</td>\n      <td>0.853</td>\n      <td>5.9</td>\n      <td>5.0</td>\n      <td>1.7</td>\n      <td>0.6</td>\n      <td>28.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}, {"output_type": "stream", "text": "Lebron James\n", "name": "stdout"}, {"output_type": "display_data", "data": {"text/plain": "   Games played  Games started  Minutes per game  Field goal percentage  \\\n0          79.0           79.0              39.5                  0.417   \n1          80.0           80.0              42.4                  0.472   \n2          79.0           79.0              42.5                  0.480   \n3          78.0           78.0              40.9                  0.476   \n4          75.0           74.0              40.4                  0.484   \n\n   3-point field-goal percentage  Free-throw percentage  Rebounds per game  \\\n0                          0.290                  0.754                5.5   \n1                          0.351                  0.750                7.4   \n2                          0.335                  0.738                7.0   \n3                          0.319                  0.698                6.7   \n4                          0.315                  0.712                7.9   \n\n   Assists per game  Steals per game  Blocks per game  Points per game  \n0               5.9              1.6              0.7             20.9  \n1               7.2              2.2              0.7             27.2  \n2               6.6              1.6              0.8             31.4  \n3               6.0              1.6              0.7             27.3  \n4               7.2              1.8              1.1             30.0  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Games played</th>\n      <th>Games started</th>\n      <th>Minutes per game</th>\n      <th>Field goal percentage</th>\n      <th>3-point field-goal percentage</th>\n      <th>Free-throw percentage</th>\n      <th>Rebounds per game</th>\n      <th>Assists per game</th>\n      <th>Steals per game</th>\n      <th>Blocks per game</th>\n      <th>Points per game</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>79.0</td>\n      <td>79.0</td>\n      <td>39.5</td>\n      <td>0.417</td>\n      <td>0.290</td>\n      <td>0.754</td>\n      <td>5.5</td>\n      <td>5.9</td>\n      <td>1.6</td>\n      <td>0.7</td>\n      <td>20.9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80.0</td>\n      <td>80.0</td>\n      <td>42.4</td>\n      <td>0.472</td>\n      <td>0.351</td>\n      <td>0.750</td>\n      <td>7.4</td>\n      <td>7.2</td>\n      <td>2.2</td>\n      <td>0.7</td>\n      <td>27.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>79.0</td>\n      <td>79.0</td>\n      <td>42.5</td>\n      <td>0.480</td>\n      <td>0.335</td>\n      <td>0.738</td>\n      <td>7.0</td>\n      <td>6.6</td>\n      <td>1.6</td>\n      <td>0.8</td>\n      <td>31.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>78.0</td>\n      <td>78.0</td>\n      <td>40.9</td>\n      <td>0.476</td>\n      <td>0.319</td>\n      <td>0.698</td>\n      <td>6.7</td>\n      <td>6.0</td>\n      <td>1.6</td>\n      <td>0.7</td>\n      <td>27.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>75.0</td>\n      <td>74.0</td>\n      <td>40.4</td>\n      <td>0.484</td>\n      <td>0.315</td>\n      <td>0.712</td>\n      <td>7.9</td>\n      <td>7.2</td>\n      <td>1.8</td>\n      <td>1.1</td>\n      <td>30.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}, {"output_type": "stream", "text": "Stephen Curry\n", "name": "stdout"}, {"output_type": "display_data", "data": {"text/plain": "   Games played  Games started  Minutes per game  Field goal percentage  \\\n0          80.0           77.0              36.2                  0.462   \n1          74.0           74.0              33.6                  0.480   \n2          26.0           23.0              28.2                  0.490   \n3          78.0           78.0              38.2                  0.451   \n4          78.0           78.0              36.5                  0.471   \n\n   3-point field-goal percentage  Free-throw percentage  Rebounds per game  \\\n0                          0.437                  0.885                4.5   \n1                          0.442                  0.934                3.9   \n2                          0.455                  0.809                3.4   \n3                          0.453                  0.900                4.0   \n4                          0.424                  0.885                4.3   \n\n   Assists per game  Steals per game  Blocks per game  Points per game  \n0               5.9              1.9              0.2             17.5  \n1               5.8              1.5              0.3             18.6  \n2               5.3              1.5              0.3             14.7  \n3               6.9              1.6              0.2             22.9  \n4               8.5              1.6              0.2             24.0  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Games played</th>\n      <th>Games started</th>\n      <th>Minutes per game</th>\n      <th>Field goal percentage</th>\n      <th>3-point field-goal percentage</th>\n      <th>Free-throw percentage</th>\n      <th>Rebounds per game</th>\n      <th>Assists per game</th>\n      <th>Steals per game</th>\n      <th>Blocks per game</th>\n      <th>Points per game</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>80.0</td>\n      <td>77.0</td>\n      <td>36.2</td>\n      <td>0.462</td>\n      <td>0.437</td>\n      <td>0.885</td>\n      <td>4.5</td>\n      <td>5.9</td>\n      <td>1.9</td>\n      <td>0.2</td>\n      <td>17.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>74.0</td>\n      <td>74.0</td>\n      <td>33.6</td>\n      <td>0.480</td>\n      <td>0.442</td>\n      <td>0.934</td>\n      <td>3.9</td>\n      <td>5.8</td>\n      <td>1.5</td>\n      <td>0.3</td>\n      <td>18.6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26.0</td>\n      <td>23.0</td>\n      <td>28.2</td>\n      <td>0.490</td>\n      <td>0.455</td>\n      <td>0.809</td>\n      <td>3.4</td>\n      <td>5.3</td>\n      <td>1.5</td>\n      <td>0.3</td>\n      <td>14.7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>78.0</td>\n      <td>78.0</td>\n      <td>38.2</td>\n      <td>0.451</td>\n      <td>0.453</td>\n      <td>0.900</td>\n      <td>4.0</td>\n      <td>6.9</td>\n      <td>1.6</td>\n      <td>0.2</td>\n      <td>22.9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>78.0</td>\n      <td>78.0</td>\n      <td>36.5</td>\n      <td>0.471</td>\n      <td>0.424</td>\n      <td>0.885</td>\n      <td>4.3</td>\n      <td>8.5</td>\n      <td>1.6</td>\n      <td>0.2</td>\n      <td>24.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "<h2 id=\"Section_3\">  Question 2: plot the Points per game for a player using the function plt.plot().</h2>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "Import the plotting  library \n"}, {"metadata": {}, "cell_type": "code", "source": "import matplotlib.pyplot as plt", "execution_count": 8, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "Using the function <code>plt.plot()</code> plot the Points per game, for one player Just a note you can plot a dataframe column like a numpy array. You can also plot them for each player. Find out how to add a xlabel 'years', a ylabel 'Points per game' and a legend.\n"}, {"metadata": {}, "cell_type": "code", "source": "for i, dataframe in enumerate(DataFrameStats):\n    plt.figure()\n    plt.plot(dataframe[['Points per game']],label=names[i])\n    plt.legend()\n    plt.xlabel('years')\n    plt.ylabel('Points per game')\n\n\nplt.show()", "execution_count": 9, "outputs": [{"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "\n"}, "metadata": {"needs_background": "light"}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "\n"}, "metadata": {"needs_background": "light"}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "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\n"}, "metadata": {"needs_background": "light"}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "\n"}, "metadata": {"needs_background": "light"}}]}, {"metadata": {}, "cell_type": "markdown", "source": "<h2 id=\"Section_4\">  How to submit </h2>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "<p>Once you complete your notebook you will have to share it to be marked. Select the icon on the top right a marked in red in the image below, a dialogue box should open, enable the option marked in red in the image below.</p>\n\n<p><img height=\"400\" width=\"500\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/FinalModule_edX/images/FA1.PNG\" alt=\"share notebook\"></p>\n<p></p>\n\n<p>Once the option is enabled select the option all\u00a0content excluding sensitive code cells and you can then share the notebook\u00a0 via a\u00a0 URL as shown in the following image:</p>\n<p style=\"text-align: center;\"> <img height=\"400\" width=\"500\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/FinalModule_edX/images/FA2.PNG\" alt=\"share notebook\"> </p>\n"}, {"metadata": {}, "cell_type": "markdown", "source": "## Authors\n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/\">Joseph Santarcangelo</a> \n\nJoseph Santarcangelo has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n\n## Other contributors\n\n<a href=\"https://www.linkedin.com/in/michelleccarey/\">Michelle Carey</a>\n\n<a href=\"www.linkedin.com/in/jiahui-mavis-zhou-a4537814a\">Mavis Zhou</a> \n\n## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By | Change Description                 |\n| ----------------- | ------- | ---------- | ---------------------------------- |\n| 2020-09-01        | 2.0     | Lavanya    | Moved lab to course repo in GitLab |\n\n<hr>\n\n## <h3 align=\"center\"> \u00a9 IBM Corporation 2020. All rights reserved. <h3/>\n"}, {"metadata": {}, "cell_type": "code", "source": "", "execution_count": null, "outputs": []}], "metadata": {"kernelspec": {"name": "python3", "display_name": "Python 3.7", "language": "python"}, "language_info": {"name": "python", "version": "3.7.10", "mimetype": "text/x-python", "codemirror_mode": {"name": "ipython", "version": 3}, "pygments_lexer": "ipython3", "nbconvert_exporter": "python", "file_extension": ".py"}}, "nbformat": 4, "nbformat_minor": 2}gdsf
